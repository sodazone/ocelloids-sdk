// Copyright 2023-2024 SO/DA zone
// SPDX-License-Identifier: Apache-2.0

import { EventRecord, BlockNumber, Address } from '@polkadot/types/interfaces';
import { Compact, GenericExtrinsic } from '@polkadot/types';
import type { TxWithEvent } from '@polkadot/api-derive/types';
import type { AnyJson, IU8a } from '@polkadot/types-codec/types';

import { EventWithId, ExtrinsicBlockContext, ExtrinsicWithId, TxWithIdAndEvent } from './interfaces.js';
import { GenericEventWithId } from './event.js';

/**
 * Represents additional addresses involved in flattened extrinsics.
 *
 * The `ExtraSigners` type is used to provide context in flattened extrinsics
 * indicating the proxied or multisig address that was involved in the extrinsic.
 *
 * @property type - Either 'proxied' or 'multisig'.
 * @property address - The address associated with the account.
 */
export type ExtraSigner = {
  type: 'proxied' | 'multisig';
  address: Address;
};

/**
 * A subclass of GenericExtrinsic that includes identifier information.
 */
export class GenericExtrinsicWithId extends GenericExtrinsic implements ExtrinsicWithId {
  protected readonly _extrinsic: GenericExtrinsic;
  readonly blockNumber: Compact<BlockNumber>;
  readonly blockHash: IU8a;
  readonly blockPosition: number;
  readonly extraSigners: ExtraSigner[];

  constructor(
    value: GenericExtrinsic,
    { blockNumber, blockPosition, blockHash }: ExtrinsicBlockContext,
    extraSigners: ExtraSigner[] = []
  ) {
    super(value.registry);

    this._extrinsic = value;
    this.blockNumber = blockNumber;
    this.blockPosition = blockPosition;
    this.blockHash = blockHash;
    this.extraSigners = extraSigners;

    return new Proxy(this, {
      get<T>(target: GenericExtrinsicWithId, p: keyof GenericExtrinsic): T {
        if (p === 'toHuman') {
          return target.toHuman as T;
        }

        if (p in target._extrinsic) {
          return target._extrinsic[p] as T;
        }

        return target[p] as T;
      },
    });
  }

  /**
   * Returns the unique identifier of the extrinsic.
   * The identifier is generated by combining the block number and the position of the extrinsic within the block.
   * The identifier follows the format `<block number>-<position>`, where:
   * - `<block number>` is the number of the block containing the extrinsic.
   * - `<position>` is the positional index of the extrinsic within the block, starting from 0.
   */
  get extrinsicId() {
    return `${this.blockNumber.toString()}-${this.blockPosition}`;
  }

  addExtraSigner(s: ExtraSigner) {
    this.extraSigners.push(s);
  }

  /**
   * Returns the JSON representation of the extrinsic with the added extrinsicId, blockNumber, and position properties.
   */
  toHuman(isExpanded?: boolean | undefined): AnyJson {
    return {
      extrinsicId: this.extrinsicId,
      blockNumber: this.blockNumber.toHuman(),
      blockHash: this.blockHash.toHuman(),
      position: this.blockPosition,
      extraSigners: this.extraSigners?.map((o) => ({
        type: o.type,
        address: o.address.toHuman(),
      })),
      ...(this._extrinsic.toHuman(isExpanded) as any),
    };
  }
}

/**
 * Enhances a transaction object with identifier information by wrapping the extrinsic with the GenericExtrinsicWithId class.
 * @param xtContext The extrinsic block context.
 * @param tx The transaction object to enhance.
 * @returns The enhanced transaction object with identifier information.
 */
export function enhanceTxWithIdAndEvents(
  xtContext: ExtrinsicBlockContext,
  tx: TxWithEvent,
  events: EventRecord[]
): TxWithIdAndEvent {
  const { blockHash, blockNumber, blockPosition: xtIndex } = xtContext;
  const eventsWithId: EventWithId[] = [];

  for (let index = 0; index < events.length; index++) {
    const { phase, event } = events[index];
    if (phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(xtIndex)) {
      eventsWithId.push(
        new GenericEventWithId(event, {
          blockHash,
          blockNumber,
          blockPosition: index,
        })
      );
    }
  }

  tx.events = eventsWithId;
  tx.extrinsic = new GenericExtrinsicWithId(tx.extrinsic, xtContext);
  return tx as TxWithIdAndEvent;
}
